AWSTemplateFormatVersion: 2010-09-09

Description: CI/CD pipeline setup for prefect-flows deployment

Parameters:
  Name:
    Type: String
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
    Description: Name describing name of the resource
  Owner:
    Type: String
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
    Description: Owner describing who is provisioning this resource
  Project:
    Type: String
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
    Description: Project describing for which project this resource will be used
  Environment:
    Type: String
    Description: Environment declaration
  BusinessUnit:
    Description: Business Unit
    Type: String
  MDPSecretsStackName:
    Type: String
    Description: Name of mdp secrets cloudformation stack
  CodeStarConnectionId:
    Type: String
    Description: bitbucket codestar connection id
  FullRepositoryName:
    Type: String
    Description: Full name of repository which act as source for codepipeline
  SourceBranchName:
    Type: String
    Description: name of the branch which act as source
  PrefectStackName:
    Type: String
    Description: Name of Prefect Cloudformation Stack
  ScriptExtraArgs:
    Type: String
    Description: Suffix to be added to prefect flow names
  DockerImageName:
    Type: String
    Description: Name of the docker image
  PrefectBaseImageUri:
    Type: String
    Description: URI of the base prefect image in ECR
  AirflowStackName:
    Type: String
    Description: Name of Airflow cloudformation stack

Resources:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Sid: ''
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSCodeStarServiceRole
        - arn:aws:iam::aws:policy/AWSCodeStarFullAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - codestar-connections:UseConnection
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${CodeStarConnectionId}'
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource: '*'
              - Action:
                  - s3:*
                Effect: Allow
                Resource:
                  - Fn::Sub:
                      - 'arn:aws:s3:::${S3BucketName}'
                      - S3BucketName:
                          Fn::ImportValue: !Sub '${PrefectStackName}-S3BucketName'
            Version: '2012-10-17'
          PolicyName: codepipelinepolicy
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  PrefectFlowsTestBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:4.0'
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
      TimeoutInMinutes: 60
      Source:
        Type: CODEPIPELINE
        BuildSpec: >
          version: 0.2

          phases:
            install:
              runtime-versions:
                python: 3.7
            pre_build:
              commands:
                - pip install -r requirements.txt
            build:
              commands:
                - echo "Testing all flows"
                - python scripts/prefect_build/build.py --test
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  PrefectFlowsDeployBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:4.0'
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
      TimeoutInMinutes: 60
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          Fn::Sub:
            - >
              version: 0.2

              env:
                secrets-manager:
                  API_KEY: ${PrefectAPIARN}
              phases:
                install:
                  runtime-versions:
                    python: 3.7
                pre_build:
                  commands:
                    - pip install -r requirements.txt
                    - prefect auth login -k ${!API_KEY}
                    - REGISTRY=${!ACCOUNT_ID}.dkr.ecr.${!REGION}.amazonaws.com
                    - aws ecr get-login-password --region ${!REGION} | docker login --username AWS --password-stdin ${!REGISTRY}
                build:
                  commands:
                    - echo "Registering/Updating all flows"
                    - python scripts/prefect_build/build.py --labels ${!ENVIRONMENT} --s3-bucket ${!S3_BUCKET} ${ScriptExtraArgs}
                    - docker build --build-arg PREFECT_BASE_IMAGE_URI=${PrefectBaseImageUri} -t ${!DOCKER_IMAGE_NAME} .
                    - docker tag ${!DOCKER_IMAGE_NAME}:${!TAG} ${!REGISTRY}/${!DOCKER_IMAGE_NAME}:${!TAG}
                post_build:
                  commands:
                    - docker push ${!REGISTRY}/${!DOCKER_IMAGE_NAME}:${!TAG}
            - PrefectAPIARN:
                Fn::ImportValue: !Sub '${MDPSecretsStackName}-PrefectAPISecretARN'
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${Name}-${Environment}-pipeline'
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Location:
          'Fn::ImportValue': !Sub '${PrefectStackName}-S3BucketName'
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: GetSourceCodeRepository
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Sub 'arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${CodeStarConnectionId}'
                BranchName: !Ref SourceBranchName
                FullRepositoryId: !Ref FullRepositoryName
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              OutputArtifacts:
                - Name: SourceCodeRepository
              Namespace: SourceVariables
              RunOrder: 1
        - Name: TEST
          Actions:
            - Name: TestPrefectFlows
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref PrefectFlowsTestBuild
              RunOrder: 1
              InputArtifacts:
                - Name: SourceCodeRepository
        - Name: Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              RunOrder: 1
              Configuration:
                NotificationArn:
                  Fn::ImportValue: !Sub '${AirflowStackName}-mdp-topic-arn'
                CustomData: >
                  Testing of all dags, flows and connection is completed, please approve to deploy flows and connection
        - Name: Deploy
          Actions:
            - Name: DeployPrefectFlows
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref PrefectFlowsDeployBuild
                EnvironmentVariables: !Join
                  - ''
                  - - '['
                    - Fn::Sub:
                        - '{"name":"S3_BUCKET","value":"${S3BucketName}","type":"PLAINTEXT"},'
                        - S3BucketName:
                            Fn::ImportValue: !Sub '${PrefectStackName}-S3BucketName'
                    - !Sub '{"name":"DOCKER_IMAGE_NAME","value":"${DockerImageName}","type":"PLAINTEXT"},'
                    - '{"name":"ENVIRONMENT","value":"${Environment}","type":"PLAINTEXT"}'
                    - ']'
              RunOrder: 1
              InputArtifacts:
                - Name: SourceCodeRepository
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit
