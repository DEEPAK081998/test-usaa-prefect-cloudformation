---
AWSTemplateFormatVersion: 2010-09-09

Description: Setup of Airbyte server

Parameters:
  Name:
    Type: String
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
    Description: Name describing name of the resource
  Owner:
    Type: String
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
    Description: Owner describing who is provisioning this resource
  Project:
    Type: String
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
    Description: Project describing for which project this resource will be used
  Environment:
    Type: String
    Description: Environment declaration
  BusinessUnit:
    Description: Business Unit
    Type: String
  LambdaS3Key:
    Type: String
    Description: S3 key where lambdas is deployed
  LambdaLayerS3Key:
    Type: String
    Description: S3 key where lambda layers are deployed
  WebHooksLambdaMessagePollingRate:
    Type: String
    Description: Max number of messages the WebHooks lambda will process
  WebHooksLambdaScheduleExpression:
    Type: String
    Description: cron schedule that will run the WebHookslambda
  BitlyGroupId:
    Type: String
    Description: Group ID for Bitly api call
  # EC2Subnet:
  #   Description: The subnet id in which to launch instance into
  #   Type: AWS::SSM::Parameter::Value<String>
  # VpcId:
  #   Description: >
  #     VPC to use.  Must include two availability zones each with both a private (with NAT and VPN) and public subnet
  #   Type: AWS::SSM::Parameter::Value<String>

Conditions:
  IsSandboxEnv: !Equals [!Ref Environment, "sandbox"]

Resources:
  BitlyCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub 'Contains secret values for bitly api key'
      GenerateSecretString:
        IncludeSpace: false
        ExcludePunctuation: true
        RequireEachIncludedType: true
        SecretStringTemplate: !Sub '{"api_name":"bitly"}'
        GenerateStringKey: "password"
      Name: !Sub "${Name}-${Environment}-bitly-secret"
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  ProcessWebhookLambdaRole:
    Type: AWS::IAM::Role
    Description: IAM Role for webhooks process lambda function
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  BitlyLambdaProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SecretManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref BitlyCredentials
        - PolicyName: WriteToS3Bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow Lambda to write logs to CloudWatch
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  # WebhooksSQSAccessPolicy:
  #   Type: AWS::IAM::Policy
  #   Description: Policy for allowed actions on sqs resource
  #   Properties:
  #     PolicyName: SQSAccessPolicy
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - sqs:ChangeMessageVisibility
  #             - sqs:DeleteMessage
  #             - sqs:GetQueueAttributes
  #             - sqs:GetQueueUrl
  #             - sqs:ReceiveMessage
  #           Resource:
  #             - !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-postmark-webhooks-sqs-queue-arn}}"
  #     Roles:
  #       - !Ref ProcessWebhookLambdaRole

  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Description: Policy for allowed actions on s3 resource
    Properties:
      PolicyName: !Sub "${Name}-${Environment}-S3AccessPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:List*
              - s3:AbortMultipartUpload
              - s3:DeleteObject
              - s3:PutObjectAcl
              - s3:GetBucketLocation
            Resource:
              - Fn::Sub:
                  - "arn:aws:s3:::${S3BucketName}"
                  - S3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
              - Fn::Sub:
                  - "arn:aws:s3:::${S3BucketName}/*"
                  - S3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
              - Fn::Sub:
                  - "arn:aws:s3:::${PartnerEmailS3BucketName}"
                  - PartnerEmailS3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-partner-email-s3-bucket-name}}"
              - Fn::Sub:
                  - "arn:aws:s3:::${PartnerEmailS3BucketName}/*"
                  - PartnerEmailS3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-partner-email-s3-bucket-name}}"
      Roles:
        - !Ref ProcessWebhookLambdaRole 
        - !Ref BitlyLambdaProcessorRole

  # DynamoDbPolicy:
  #   Type: AWS::IAM::Policy
  #   Description: Policy to allow reading of dynamodb data
  #   Properties:
  #     PolicyName: !Sub "${Name}-${Environment}-DynamoDBReadPolicy"
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           "Action":
  #             - "dynamodb:BatchGetItem"
  #             - "dynamodb:ConditionCheckItem"
  #             - "dynamodb:Scan"
  #             - "dynamodb:Query"
  #             - "dynamodb:DescribeTable"
  #             - "dynamodb:GetItem"
  #             - "dynamodb:DescribeStream"
  #             - "dynamodb:GetRecords"
  #             - "dynamodb:GetShardIterator"
  #             - "dynamodb:ListStreams"
  #           Resource:
  #             - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/mdp*/index/*"
  #             - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/mdp*"
  #             - !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-airflow-params-dynamodb-arn}}"
  #             - !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-airflow-params-dynamodb-stream-arn}}"
  #     Roles:
  #       - !Ref DagsManagementLambdaRole  

  S3Policy:
    Type: AWS::IAM::Policy
    Description: Policy for allowed actions on s3 bucket
    Properties:
      PolicyName: !Sub "${Name}-${Environment}-AirflowS3Policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action: s3:ListAllMyBuckets
            Resource:
              - Fn::Sub:
                  - "arn:aws:s3:::${S3BucketName}"
                  - S3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
              - Fn::Sub:
                  - "arn:aws:s3:::${S3BucketName}/*"
                  - S3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
          - Effect: Allow
            Action:
              - "s3:GetObject*"
              - "s3:GetBucket*"
              - "s3:PutObject"
              - "s3:List*"
              - "s3:DeleteObject"
              - "s3:PutObjectAcl"
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
            Resource:
              - Fn::Sub:
                  - "arn:aws:s3:::${S3BucketName}"
                  - S3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
              - Fn::Sub:
                  - "arn:aws:s3:::${S3BucketName}/*"
                  - S3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
              - Fn::Sub:
                  - "arn:aws:s3:::${PartnerEmailS3BucketName}"
                  - PartnerEmailS3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-partner-email-s3-bucket-name}}"
              - Fn::Sub:
                  - "arn:aws:s3:::${PartnerEmailS3BucketName}/*"
                  - PartnerEmailS3BucketName: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-partner-email-s3-bucket-name}}"
      Roles:
        - !Ref DagsManagementLambdaRole

  SNSPolicy:
    Type: AWS::IAM::Policy
    Description: Policy to publish events on SNS topic
    Properties:
      PolicyName: !Sub "${Name}-${Environment}-AirflowSNSPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-data-pipeline-errors-topic-arn}}"
      Roles:
        - !Ref DagsManagementLambdaRole

  # LambdaInvokePolicy:
  #   Type: AWS::IAM::Policy
  #   Description: Policy for invoke actions on lambda resource
  #   Properties:
  #     PolicyName: LambdaInvocationPolicy
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - lambda:InvokeFunction
  #           Resource:
  #             - !GetAtt UpdateBitlyClicksLambda.Arn
  #             - !GetAtt UpdateBitlyLinksLambda.Arn
  #     Roles:
  #       - !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-airflow-execution-role-name}}"

  ProcessWebhookLambda:
    Type: AWS::Lambda::Function
    Description: Lambda function that handles webhooks
    Properties:
      Code:
        S3Bucket:
          !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
        S3Key: !Sub "${LambdaS3Key}/process_webhook_lambda.zip"
      Environment:
        Variables:
          # WEBHOOKS_QUEUE_NAME: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-postmark-webhooks-sqs-queue-name}}"
          S3_BUCKET_NAME:
            !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
          QUEUE_MAX_BATCH_SIZE: 10
          QUEUE_MAX_WAIT_TIME: 10
          MESSAGES_POLLING_LIMIT: !Ref WebHooksLambdaMessagePollingRate
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt ProcessWebhookLambdaRole.Arn
      Runtime: python3.7
      Timeout: 900 # 15 minutes
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  WebhooksScheduleRule:
    Type: AWS::Events::Rule
    Description: cloudwatch event to schedule lambda as required
    Properties:
      Description: Schedule lambda as required
      ScheduleExpression: !Ref WebHooksLambdaScheduleExpression
      State: !If [IsSandboxEnv, DISABLED, ENABLED] # setting it to disabled on sandbox as we don't need it right now
      Targets:
        - Arn: !GetAtt ProcessWebhookLambda.Arn
          Id: "WebhooksScheduleRule"
  
  WebhooksLambdaScheduleInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessWebhookLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt WebhooksScheduleRule.Arn

  # BitlyLambdaSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupName: !Sub "${Name}-${Environment}-bitly-lambda-sg"
  #     GroupDescription: Enable port 443 HTTPS.
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 443
  #         ToPort: 443
  #         CidrIp: '10.0.0.0/8'
  #     VpcId: !Ref VpcId
  #     Tags:
  #       - Key: Owner
  #         Value: !Ref Owner
  #       - Key: Project
  #         Value: !Ref Project
  #       - Key: Environment
  #         Value: !Ref Environment
  #       - Key: BusinessUnit
  #         Value: !Ref BusinessUnit

  UpdateBitlyClicksLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Description: Layer to store extra python packages required by bitly clicks lambda function
    Properties:
      CompatibleRuntimes:
        - python3.10
      Content:
        S3Bucket:
          !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
        S3Key: !Sub "${LambdaLayerS3Key}/update_bitly_clicks_lambda_layer.zip" 
      Description: Adds the additional packages for lambda function to work

  UpdateBitlyLinksLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Description: Layer to store extra python packages required by bitly links lambda function
    Properties:
      CompatibleRuntimes:
        - python3.10
      Content:
        S3Bucket:
          !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
        S3Key: !Sub "${LambdaLayerS3Key}/update_bitly_links_lambda_layer.zip" 
      Description: Adds the additional packages for lambda function to work

  UpdateBitlyLinksLambda:
    Type: AWS::Lambda::Function
    Properties:
      MemorySize: 200
      Handler: lambda_handler.lambda_handler
      Description: Call Sendgrid to grab email data per partner
      Environment:
        Variables:
          PARTNER_SMS_KEY: !Sub "${Name}-${Environment}-bitly-secret"
          ENVIRONMENT: !Sub "${Environment}"
          PARTNER: !Sub "${BusinessUnit}"
          BITLY_GROUP: !Sub "${BitlyGroupId}"
          S3_KEY: "bitly"
          BUCKET_NAME:
            !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
      Runtime: python3.10
      Layers:
        - !Ref BitlyLinksLambdaAwsPackageLayer
      Timeout: 300
      Role: !GetAtt BitlyLambdaProcessorRole.Arn
      # VpcConfig:
      #   SecurityGroupIds:
      #     - !GetAtt BitlyLambdaSecurityGroup.GroupId
      #   SubnetIds:
      #     - !Ref EC2Subnet
      Code:
        S3Bucket:
          !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
        S3Key: !Sub "${LambdaS3Key}/update_bitly_links_lambda.zip" 
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  UpdateBitlyClicksLambda:
    Type: AWS::Lambda::Function
    Properties:
      MemorySize: 200
      Handler: lambda_handler.lambda_handler
      Description: Updates click counts to work with API limit 1000 calls per hour
      Environment:
        Variables:
          PARTNER_SMS_KEY: !Sub "${Name}-${Environment}-bitly-secret"
          ENVIRONMENT: !Sub "${Environment}"
          PARTNER: !Sub "${BusinessUnit}"
          BITLY_GROUP: !Sub "${BitlyGroupId}"
          S3_KEY: "bitly"
          BUCKET_NAME:
            !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
      Runtime: python3.10
      Layers:
        - !Ref BitlyClicksLambdaAwsPackageLayer
      Timeout: 300
      Role: !GetAtt BitlyLambdaProcessorRole.Arn
      # VpcConfig:
      #   SecurityGroupIds:
      #     - !GetAtt BitlyLambdaSecurityGroup.GroupId
      #   SubnetIds:
      #     - !Ref EC2Subnet
      Code:
        S3Bucket:
          !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
        S3Key: !Sub "${LambdaS3Key}/update_bitly_clicks_lambda.zip"
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit
  
  ClicksSmsCronEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: "Update click counts for agents sms data every hour"
      # fire at the beginning of every hour
      ScheduleExpression: cron(0 * ? * * *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateBitlyClicksLambda.Arn
          Id: UpdateBitlyClicksLambda
  
  UpdateBitlyClicksLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ClicksSmsCronEvent.Arn
      FunctionName: !Ref UpdateBitlyClicksLambda


  DagsManagementLambdaRole:
    Type: AWS::IAM::Role
    Description: IAM Role for lambda function
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  DagsManagementLambda:
    Type: AWS::Lambda::Function
    Description: Lambda function that handles management of dags
    Properties:
      Code:
        S3Bucket:
          !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
        S3Key: !Sub "${LambdaS3Key}/dags_management_lambda.zip"
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt DagsManagementLambdaRole.Arn
      Runtime: python3.10
      Environment:
        Variables:
          S3_BUCKET_NAME:
            !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
      Layers:
        - !Ref DagsManagementLambdaLayer
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  # DagsManagementLambdaEventSourceMapping:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Description: Source event trigger to trigger lambda when row is created/updated in dynamodb
  #   Properties:
  #     BatchSize: 1
  #     MaximumRetryAttempts: 2
  #     StartingPosition: LATEST
  #     DestinationConfig:
  #       OnFailure:
  #         Destination: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-data-pipeline-errors-topic-arn}}"
  #     EventSourceArn: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-airflow-params-dynamo-table-arn}}"
  #     FunctionName: !Ref DagsManagementLambda

  DagsManagementLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Description: Lambda layer to provide proper working of lambda
    Properties:
      Description: Lambda layer for dags working
      CompatibleRuntimes:
        - python3.10
      Content:
        S3Bucket:
          !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
        S3Key: !Sub "${LambdaLayerS3Key}/dags_management_lambda_layer.zip"
  
  SendNotificationLambdaRole:
    Type: AWS::IAM::Role
    Description: IAM Role for lambda function
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Ref Name
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit
  
  SendNotificationLambda:
    Type: AWS::Lambda::Function
    Description: Lambda function that handles notification
    Properties:
      Code:
        S3Bucket:
          !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-s3-bucket-name}}"
        S3Key: !Sub "${LambdaS3Key}/send_notification_lambda.zip"
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt SendNotificationLambdaRole.Arn
      Runtime: python3.7
      Tags:
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: BusinessUnit
          Value: !Ref BusinessUnit

  SendNotificationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-mdp-codepipeline-approval-topic-arn}}"
      FunctionName: !Ref SendNotificationLambda

  NotificationLambdaSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SendNotificationLambda.Arn
      Protocol: lambda
      TopicArn: !Sub "{{resolve:ssm:${BusinessUnit}-${Environment}-mdp-codepipeline-approval-topic-arn}}"
